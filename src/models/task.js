import {isArray} from '../utils/util';

export default {
    namespace: 'task',
    state: {
        task: [],
        handles: [],
        showModal: false
    },
    reducers: {
        save: (state, {payload}) => {
            return {...state, ...payload}
        }
    },
    effects: {
        *fetch({payload: { url, type } }, {call, put}) {
            const { data } = yield call(saga({type: 'get', url}));
            yield put({
                type: 'save',
                payload: {
                    [type]: (data|| []).filter(d => d)
                }
            })
        }
    }
}


/**
 * TASK 列表处理逻辑
 * 
 * 用户登录后，获取服务器任务列表信息，如果返回不为空，根据任务列表存入缓存；
 * 
 * 用户登录状态下，刷新页面，从缓存中获取任务信息，初始化任务列表
 * 
 * 关闭列表，检测是否有正在上传中的任务，如果有上传中的任务，提示用户，如果用户取消，则取消上传，删除所有未上传成功，错误失败的记录，仅保留缓存中正在入库的记录（后台处理，前端交互不影响处理结果的记录）
 * 
 * 数据集 TASK 处理逻辑
 * 
 * 1、上传操作，是否符合要求，如果不符合，则提示信息，直接退出；
 * 2、加入上传TASK列表
 * 3、更新上传进度；
 * 4、如果上传失败，提示失败信息，可删除；
 * 5、数据集上传完成后，服务器返回图层预览信息，直接存入本地缓存，localWaitDatasets，清空 state.previews
 * 6、任务列表读取 localWaitDatasets，等待用户操作
 * 7、用户可逐个预览配置，发布入库命令，删除
 * 8、用户可统一配置，发布入库命令
 * 9、发一条入库命令后，返回任务ID，存入缓存中 localWaitDatasets，更新对应的数据集信息；
 * 10、将ID加入服务集任务ID列表，进行二次进度更新；
 * 11、定时读取 任务状态列表，进行二次进度更新；
 * 12、任完进度完成后从缓存、任务列表中清除记录
 * 13、如果报错，不做删除，用户手动删除
 * 
 * 服务集 TASK 处理逻辑
 * 1、上传操作，是否符合要求，如果不符合，则提示信息，直接退出；
 * 2、加入上传TASK列表
 * 2、更新上传进度；
 * 3、如果上传失败，提示失败信息；可删除；
 * 4、上传成功，返回任务ID，将ID加入服务集任务ID列表，进行二次进度更新；
 * 5、更新进度；
 * 6、如果发布失败，提示失败信息，可删除；
 * 
 * TASK 组件
 * 1、列表组件
 * 2、数据集列表项组件
 * 3、服务集列表项组件
 * 4、数据集预览界面
 * 5、数据集统一配置界面
 * 6、错误提示消息组件
 * 
 * 
 */